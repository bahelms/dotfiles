# Path to your oh-my-zsh installation.
export ZSH=/home/vagrant/.oh-my-zsh

if [ -r $HOME/.custom_env_vars ];
then
  source $HOME/.custom_env_vars
fi

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="jimbonk"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git bundler rails)

# User configuration

export PATH="/home/vagrant/.rbenv/shims:/home/vagrant/.rbenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/opt/vagrant_ruby/bin"
# export MANPATH="/usr/local/man:$MANPATH"

source $ZSH/oh-my-zsh.sh

preexec() { print "" } # runs before command is executed
# precmd() { print "" }  # runs before prompt is displayed

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Aliases
alias ls.="ls -alFh --group-directories-first"
alias rake="noglob bundle exec rake"

# Devbox stuff
export DEV_BOX=$HOME/work/devbox
alias vup="cd $DEV_BOX;vagrant up --provision;"
alias vhalt="cd $DEV_BOX; vagrant halt;"
alias vssh="cd $DEV_BOX; vagrant ssh;"
alias apps="cd /var/apps"
alias qa="ssh tk-qa"
alias prod="ssh tk-prod"
alias repuppet="sudo /usr/bin/puppet apply --verbose --show_diff --confdir /var/puppet --environment development /var/puppet/manifests/development.pp"

function start_app {
  if [ -n "$1" ]
  then
    app_dir=/var/apps/$1_app
  elif [ -x $PWD/script/start.sh ] 
  then
    app_dir=$PWD
  elif [ -x $PWD/script/start ] 
  then
    app_dir=$PWD
  else
    echo "Please provide an app name"
    list_apps
    return
  fi
  
  app_name=$(basename $app_dir)
  x=`pwd`

  if [ -x $app_dir/script/start.sh ]
  then
    echo "Starting $app_name..."
    cd $app_dir
    script/start.sh
    echo "Started."
  elif [ -x $app_dir/script/start ]
  then
    echo "Starting $app_name..."
    cd $app_dir
    script/start
    echo "Started."
  elif [ -d $app_dir ]
  then
    echo "Starting $app_name.."
    cd $app_dir
    bundle exec unicorn -c config/unicorn.rb -E development -D
    echo "Started."
  else
    echo "No such app"
    list_apps
  fi

  cd $x
}

function stop_app {
  if [ -n "$1" ]
  then
    app_dir=/var/apps/$1_app
  elif [ -x $PWD/script/stop ] 
  then
    app_dir=$PWD
  elif [ -x $PWD/script/stop.sh ] 
  then
    app_dir=$PWD
  else
    echo "Please provide an app name"
    list_apps
    return
  fi

  app_name=$(basename $app_dir)
  x=`pwd`

  if [ -x $app_dir/script/stop.sh ]
  then
    echo "Stopping $app_name..."
    cd $app_dir
    script/stop.sh
    echo "Stopped."
  elif [ -x $app_dir/script/stop ]
  then
    echo "Stopping $app_name..."
    cd $app_dir
    script/stop
    echo "Stopped."
  elif [ -d $app_dir ]
  then
    echo "Stopping $app_name..."
    cd $app_dir
    kill `cat $app_dir/tmp/pids/unicorn.pid` &> /dev/null
    echo "Stopped."
  else
    echo "No such app"
    list_apps
  fi

  cd $x
}

function restart_app {
  stop_app $1
  start_app $1
}

function list_apps {
  echo "Listing apps and their status... [app/worker]"
  echo
  x=`pwd`

  for d in `ls -lGa /var/apps | awk '{print $8}' | tail -n+4`
  do
    service_app_file=/etc/init.d/$d-app
    service_worker_file=/etc/init.d/$d-worker

    service_txt='unknown'
    worker_txt=''

    if [ -d /var/apps/$d ]
    then
      if [ -f $service_app_file ]
      then
        $service_app_file status | grep -q 'up and running'

        if [ $? -ne 0 ]
        then
          service_txt="\033[31mdown\033[0m"
        else
          service_txt="\033[32mup\033[0m"
        fi
      fi

      if [ -f $service_worker_file ]
      then
        $service_worker_file status | grep -q 'up and running'

        if [ $? -ne 0 ]
        then
          worker_txt="\033[31mdown\033[0m"
        else
          worker_txt="\033[31mup\033[0m"
        fi
      fi

      if [[ "${#worker_txt}" -lt "1" ]]
      then
        echo -e "$d [$service_txt]"
      else
        echo -e "$d [$service_txt/$worker_txt]"
      fi
    fi
  done

  cd $x
}

